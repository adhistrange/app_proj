package com.securityresearch.fuzzer.analysis.model;

import java.util.Arrays;
import java.util.List;

/**
 * Enumeration of vulnerability types that can be detected by the fuzzer.
 * Each type includes metadata such as CWE IDs, CVSS scores, and descriptions.
 */
public enum VulnerabilityType {
    
    ALGORITHMIC_COMPLEXITY_VULNERABILITY(
        "Algorithmic Complexity Vulnerability",
        "The method exhibits exponential or polynomial time complexity that can lead to denial of service",
        Arrays.asList("CWE-400", "CWE-1333"),
        7.5,
        Arrays.asList("complexity", "performance", "dos")
    ),
    
    MEMORY_EXHAUSTION(
        "Memory Exhaustion",
        "The method consumes excessive memory that can lead to out-of-memory errors",
        Arrays.asList("CWE-400", "CWE-789"),
        6.5,
        Arrays.asList("memory", "resource-exhaustion", "dos")
    ),
    
    TIMING_ATTACK_VULNERABILITY(
        "Timing Attack Vulnerability",
        "The method's execution time varies based on input data, potentially leaking sensitive information",
        Arrays.asList("CWE-208", "CWE-385"),
        5.0,
        Arrays.asList("timing", "side-channel", "information-disclosure")
    ),
    
    RESOURCE_EXHAUSTION(
        "Resource Exhaustion",
        "The method consumes excessive system resources (CPU, file descriptors, etc.)",
        Arrays.asList("CWE-400", "CWE-770"),
        6.0,
        Arrays.asList("resource", "exhaustion", "dos")
    ),
    
    PERFORMANCE_ANOMALY(
        "Performance Anomaly",
        "The method exhibits unusual performance characteristics that may indicate underlying issues",
        Arrays.asList("CWE-754"),
        4.0,
        Arrays.asList("performance", "anomaly", "quality")
    ),
    
    STACK_OVERFLOW_RISK(
        "Stack Overflow Risk",
        "The method has deep recursion or large stack usage that could cause stack overflow",
        Arrays.asList("CWE-674", "CWE-787"),
        5.5,
        Arrays.asList("stack", "overflow", "recursion")
    ),
    
    INFINITE_LOOP_RISK(
        "Infinite Loop Risk",
        "The method has conditions that could lead to infinite loops or excessive iterations",
        Arrays.asList("CWE-835", "CWE-400"),
        6.0,
        Arrays.asList("loop", "infinite", "dos")
    ),
    
    BUFFER_OVERFLOW_RISK(
        "Buffer Overflow Risk",
        "The method manipulates arrays or buffers in ways that could lead to overflow",
        Arrays.asList("CWE-119", "CWE-787"),
        8.0,
        Arrays.asList("buffer", "overflow", "memory-corruption")
    ),
    
    INTEGER_OVERFLOW_RISK(
        "Integer Overflow Risk",
        "The method performs arithmetic operations that could result in integer overflow",
        Arrays.asList("CWE-190", "CWE-191"),
        5.5,
        Arrays.asList("integer", "overflow", "arithmetic")
    ),
    
    RACE_CONDITION_RISK(
        "Race Condition Risk",
        "The method has potential race conditions in concurrent execution scenarios",
        Arrays.asList("CWE-362", "CWE-367"),
        6.5,
        Arrays.asList("race", "concurrency", "threading")
    ),
    
    INPUT_VALIDATION_WEAKNESS(
        "Input Validation Weakness",
        "The method lacks proper input validation, potentially leading to security issues",
        Arrays.asList("CWE-20", "CWE-125"),
        5.0,
        Arrays.asList("input", "validation", "sanitization")
    ),
    
    CRYPTOGRAPHIC_WEAKNESS(
        "Cryptographic Weakness",
        "The method uses weak cryptographic algorithms or improper cryptographic practices",
        Arrays.asList("CWE-327", "CWE-328"),
        7.0,
        Arrays.asList("crypto", "encryption", "security")
    ),
    
    SQL_INJECTION_RISK(
        "SQL Injection Risk",
        "The method constructs SQL queries in ways that could lead to SQL injection",
        Arrays.asList("CWE-89", "CWE-564"),
        8.5,
        Arrays.asList("sql", "injection", "database")
    ),
    
    PATH_TRAVERSAL_RISK(
        "Path Traversal Risk",
        "The method handles file paths in ways that could lead to directory traversal attacks",
        Arrays.asList("CWE-22", "CWE-23"),
        7.0,
        Arrays.asList("path", "traversal", "file-access")
    ),
    
    COMMAND_INJECTION_RISK(
        "Command Injection Risk",
        "The method executes system commands in ways that could lead to command injection",
        Arrays.asList("CWE-78", "CWE-77"),
        9.0,
        Arrays.asList("command", "injection", "execution")
    );
    
    private final String displayName;
    private final String description;
    private final List<String> cweIds;
    private final double defaultCvssScore;
    private final List<String> tags;
    
    VulnerabilityType(String displayName, String description, List<String> cweIds, 
                     double defaultCvssScore, List<String> tags) {
        this.displayName = displayName;
        this.description = description;
        this.cweIds = cweIds;
        this.defaultCvssScore = defaultCvssScore;
        this.tags = tags;
    }
    
    public String getDisplayName() {
        return displayName;
    }
    
    public String getDescription() {
        return description;
    }
    
    public List<String> getCweIds() {
        return cweIds;
    }
    
    public double getDefaultCvssScore() {
        return defaultCvssScore;
    }
    
    public List<String> getTags() {
        return tags;
    }
    
    /**
     * Get vulnerability type by display name.
     * 
     * @param displayName Display name to search for
     * @return VulnerabilityType or null if not found
     */
    public static VulnerabilityType fromDisplayName(String displayName) {
        return Arrays.stream(values())
                .filter(type -> type.displayName.equals(displayName))
                .findFirst()
                .orElse(null);
    }
    
    /**
     * Get vulnerability types by tag.
     * 
     * @param tag Tag to search for
     * @return List of matching vulnerability types
     */
    public static List<VulnerabilityType> findByTag(String tag) {
        return Arrays.stream(values())
                .filter(type -> type.tags.contains(tag.toLowerCase()))
                .toList();
    }
    
    /**
     * Get vulnerability types by CWE ID.
     * 
     * @param cweId CWE ID to search for
     * @return List of matching vulnerability types
     */
    public static List<VulnerabilityType> findByCweId(String cweId) {
        return Arrays.stream(values())
                .filter(type -> type.cweIds.contains(cweId.toUpperCase()))
                .toList();
    }
    
    /**
     * Get all vulnerability types with high CVSS scores.
     * 
     * @param threshold Minimum CVSS score
     * @return List of high-severity vulnerability types
     */
    public static List<VulnerabilityType> getHighSeverityTypes(double threshold) {
        return Arrays.stream(values())
                .filter(type -> type.defaultCvssScore >= threshold)
                .toList();
    }
    
    @Override
    public String toString() {
        return displayName;
    }
} 