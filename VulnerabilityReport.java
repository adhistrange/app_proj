package com.securityresearch.fuzzer.analysis.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * Represents a detected vulnerability with detailed information about the issue,
 * evidence, and recommendations.
 */
public class VulnerabilityReport {
    
    public enum Severity {
        LOW, MEDIUM, HIGH, CRITICAL
    }
    
    @JsonProperty("id")
    private String id;
    
    @JsonProperty("methodId")
    private String methodId;
    
    @JsonProperty("vulnerabilityType")
    private VulnerabilityType vulnerabilityType;
    
    @JsonProperty("severity")
    private Severity severity;
    
    @JsonProperty("title")
    private String title;
    
    @JsonProperty("description")
    private String description;
    
    @JsonProperty("evidence")
    private String evidence;
    
    @JsonProperty("confidence")
    private double confidence;
    
    @JsonProperty("detectedAt")
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    private LocalDateTime detectedAt;
    
    @JsonProperty("testCaseIds")
    private List<String> testCaseIds;
    
    @JsonProperty("performanceMetrics")
    private Map<String, Object> performanceMetrics;
    
    @JsonProperty("recommendations")
    private List<String> recommendations;
    
    @JsonProperty("cweIds")
    private List<String> cweIds;
    
    @JsonProperty("cvssScore")
    private Double cvssScore;
    
    @JsonProperty("tags")
    private List<String> tags;
    
    public VulnerabilityReport() {
        this.detectedAt = LocalDateTime.now();
    }
    
    // Builder pattern for easy construction
    public static Builder builder() {
        return new Builder();
    }
    
    public static class Builder {
        private VulnerabilityReport report = new VulnerabilityReport();
        
        public Builder id(String id) {
            report.id = id;
            return this;
        }
        
        public Builder methodId(String methodId) {
            report.methodId = methodId;
            return this;
        }
        
        public Builder vulnerabilityType(VulnerabilityType vulnerabilityType) {
            report.vulnerabilityType = vulnerabilityType;
            return this;
        }
        
        public Builder severity(Severity severity) {
            report.severity = severity;
            return this;
        }
        
        public Builder title(String title) {
            report.title = title;
            return this;
        }
        
        public Builder description(String description) {
            report.description = description;
            return this;
        }
        
        public Builder evidence(String evidence) {
            report.evidence = evidence;
            return this;
        }
        
        public Builder confidence(double confidence) {
            report.confidence = Math.max(0.0, Math.min(1.0, confidence));
            return this;
        }
        
        public Builder detectedAt(LocalDateTime detectedAt) {
            report.detectedAt = detectedAt;
            return this;
        }
        
        public Builder testCaseIds(List<String> testCaseIds) {
            report.testCaseIds = testCaseIds;
            return this;
        }
        
        public Builder performanceMetrics(Map<String, Object> performanceMetrics) {
            report.performanceMetrics = performanceMetrics;
            return this;
        }
        
        public Builder recommendations(List<String> recommendations) {
            report.recommendations = recommendations;
            return this;
        }
        
        public Builder cweIds(List<String> cweIds) {
            report.cweIds = cweIds;
            return this;
        }
        
        public Builder cvssScore(Double cvssScore) {
            report.cvssScore = cvssScore;
            return this;
        }
        
        public Builder tags(List<String> tags) {
            report.tags = tags;
            return this;
        }
        
        public VulnerabilityReport build() {
            // Generate ID if not provided
            if (report.id == null) {
                report.id = generateId();
            }
            
            // Set default title if not provided
            if (report.title == null && report.vulnerabilityType != null) {
                report.title = report.vulnerabilityType.getDisplayName();
            }
            
            return report;
        }
        
        private String generateId() {
            return "VULN-" + System.currentTimeMillis() + "-" + 
                   (report.methodId != null ? report.methodId.hashCode() : "UNKNOWN");
        }
    }
    
    // Getters and setters
    
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    
    public String getMethodId() { return methodId; }
    public void setMethodId(String methodId) { this.methodId = methodId; }
    
    public VulnerabilityType getVulnerabilityType() { return vulnerabilityType; }
    public void setVulnerabilityType(VulnerabilityType vulnerabilityType) { this.vulnerabilityType = vulnerabilityType; }
    
    public Severity getSeverity() { return severity; }
    public void setSeverity(Severity severity) { this.severity = severity; }
    
    public String getTitle() { return title; }
    public void setTitle(String title) { this.title = title; }
    
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    
    public String getEvidence() { return evidence; }
    public void setEvidence(String evidence) { this.evidence = evidence; }
    
    public double getConfidence() { return confidence; }
    public void setConfidence(double confidence) { this.confidence = confidence; }
    
    public LocalDateTime getDetectedAt() { return detectedAt; }
    public void setDetectedAt(LocalDateTime detectedAt) { this.detectedAt = detectedAt; }
    
    public List<String> getTestCaseIds() { return testCaseIds; }
    public void setTestCaseIds(List<String> testCaseIds) { this.testCaseIds = testCaseIds; }
    
    public Map<String, Object> getPerformanceMetrics() { return performanceMetrics; }
    public void setPerformanceMetrics(Map<String, Object> performanceMetrics) { this.performanceMetrics = performanceMetrics; }
    
    public List<String> getRecommendations() { return recommendations; }
    public void setRecommendations(List<String> recommendations) { this.recommendations = recommendations; }
    
    public List<String> getCweIds() { return cweIds; }
    public void setCweIds(List<String> cweIds) { this.cweIds = cweIds; }
    
    public Double getCvssScore() { return cvssScore; }
    public void setCvssScore(Double cvssScore) { this.cvssScore = cvssScore; }
    
    public List<String> getTags() { return tags; }
    public void setTags(List<String> tags) { this.tags = tags; }
    
    /**
     * Get a human-readable summary of the vulnerability.
     * 
     * @return Summary string
     */
    public String getSummary() {
        return String.format("[%s] %s - %s (Confidence: %.1f%%)", 
                           severity, title, description, confidence * 100);
    }
    
    /**
     * Check if this vulnerability is high priority.
     * 
     * @return true if high priority
     */
    public boolean isHighPriority() {
        return severity == Severity.HIGH || severity == Severity.CRITICAL;
    }
    
    /**
     * Check if this vulnerability has high confidence.
     * 
     * @return true if high confidence
     */
    public boolean isHighConfidence() {
        return confidence >= 0.8;
    }
    
    @Override
    public String toString() {
        return String.format("VulnerabilityReport{id='%s', methodId='%s', type=%s, severity=%s, confidence=%.2f}",
                           id, methodId, vulnerabilityType, severity, confidence);
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        VulnerabilityReport that = (VulnerabilityReport) obj;
        return Objects.equals(id, that.id);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(id);
    }
} 